Notes created by me (starting from step 2 of part 1):
The current runtime for the default "insert" and "append" function is: 
    
"Results for the extraLargeArray
insert 770.923417 ms    
append 2.305875 ms"

Results for the LargeArray
insert 6.502959 ms
append 414.584 μs

Results for the mediumArray
insert 127.167 μs
append 95.333 μs

Results for the smallArray
insert 23.25 μs
append 53.959 μs

Results for the tinyArray
insert 16.666 μs
append 53.125 μs


Explaination Paragraph:
    When it comes to each Array, the more trailing zeros it has the longer (more time) it takes for both funtions
    (insert and append) to loop through the Array itself. As you can see, starting from the shortest array to the longest array,
    the runtimes starts out at a microsecond (μs) span than grows to a millisecond (ms) timespan. This change is noticeable
    in the larger array sets as it shows exponential growth, more so in the "insert" function. In this case of which of the two
    funtions scale better, it would be the "Append" function, as there is a gradual "Linear" growth/ change as you move from
    smaller to larger array sets. On the other hand, as previously mentioned the "Insert" function scalibility is exponentional,]
    meaning the biggest change in growth is noticeable when the array has more trailing zeroes. For example : 
    " tinyArray = 10 vs extraLargeArray = 100000".
